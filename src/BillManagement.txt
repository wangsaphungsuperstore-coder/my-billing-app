import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { ThaiDatePicker } from "@/components/ui/thai-date-picker";
import { Badge } from "@/components/ui/badge";
import { Search, Filter, Plus, FileText, ArrowLeft } from "lucide-react";
import { formatThaiDateShort } from "@/lib/thai-locale";
import { toast } from "@/hooks/use-toast";

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•
interface Bill {
  id: string;
  billNo: string;
  date: Date;
  customer: string;
  amount: number;
  remainingAmount: number;
  notes: string;
  recordedBy: string;
  recordedDate: Date;
  recordedTime: string;
  employeeNote: string;
}

export function BillManagement() {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (menu, bills, reports, editNote)
  const [currentPage, setCurrentPage] = useState<"menu" | "bills" | "reports" | "editNote">("menu");

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 13.40)
  const [bills, setBills] = useState<Bill[]>([
    {
      id: "1",
      billNo: "B001",
      date: new Date(2025, 8, 15),
      customer: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î",
      amount: 50000,
      remainingAmount: 25000,
      notes: "‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
      recordedBy: "admin@company.com",
      recordedDate: new Date(2025, 8, 15),
      recordedTime: "14:30",
      employeeNote: ""
    },
    {
      id: "2",
      billNo: "B002",
      date: new Date(2025, 8, 18),
      customer: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ XYZ",
      amount: 30000,
      remainingAmount: 0,
      notes: "‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
      recordedBy: "admin@company.com",
      recordedDate: new Date(2025, 8, 18),
      recordedTime: "16:45",
      employeeNote: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î"
    }
  ]);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô"
  const [customers] = useState<string[]>([
    "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏à‡∏≥‡∏Å‡∏±‡∏î", "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ XYZ", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó DEF ‡∏à‡∏≥‡∏Å‡∏±‡∏î", "‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ GHI",
    "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ JKL", "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó MNO ‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏°‡∏´‡∏≤‡∏ä‡∏ô)", "‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ PQR", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ STU"
  ]);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà
  const [formData, setFormData] = useState({ billNo: "", customer: "", amount: "", notes: "" });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  const [filterStartDate, setFilterStartDate] = useState<Date | undefined>();
  const [filterEndDate, setFilterEndDate] = useState<Date | undefined>();
  const [filterBillNo, setFilterBillNo] = useState("");

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ô‡πâ‡∏ï
  const [editingBill, setEditingBill] = useState<Bill | null>(null);
  const [newEmployeeNote, setNewEmployeeNote] = useState("");

  // --- Functions ---

  const handleEditNote = (bill: Bill) => {
    setEditingBill(bill);
    setNewEmployeeNote(bill.employeeNote);
    setCurrentPage("editNote");
  };

  const handleSaveNote = () => {
    if (!editingBill) return;
    const updatedBills = bills.map(b =>
      b.id === editingBill.id ? { ...b, employeeNote: newEmployeeNote } : b
    );
    setBills(updatedBills);
    setEditingBill(null);
    setNewEmployeeNote("");
    setCurrentPage("bills");
    toast({ title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", description: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  };

  const handleNewBill = () => {
    if (!formData.billNo || !formData.customer || !formData.amount) {
      toast({ title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", variant: "destructive" });
      return;
    }
    const parsedAmount = parseFloat(formData.amount);
    if (isNaN(parsedAmount) || parsedAmount <= 0) {
      toast({ title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", description: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0", variant: "destructive" });
      return;
    }
    const now = new Date();
    const timeString = now.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit', hour12: false });
    const newBill: Bill = {
      id: Date.now().toString(),
      billNo: formData.billNo,
      date: now,
      customer: formData.customer,
      amount: parsedAmount,
      remainingAmount: parsedAmount,
      notes: formData.notes,
      recordedBy: "admin@company.com",
      recordedDate: now,
      recordedTime: timeString,
      employeeNote: ""
    };
    setBills([newBill, ...bills]);
    setFormData({ billNo: "", customer: "", amount: "", notes: "" });
    toast({ title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", description: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  };

  const filterBills = () => {
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
    const startOfDay = filterStartDate ? new Date(filterStartDate.setHours(0, 0, 0, 0)) : undefined;
    const endOfDay = filterEndDate ? new Date(filterEndDate.setHours(23, 59, 59, 999)) : undefined;

    return bills.filter(bill => {
      const billDate = bill.date;
      const startMatch = !startOfDay || billDate >= startOfDay;
      const endMatch = !endOfDay || billDate <= endOfDay;
      const billNoMatch = !filterBillNo || bill.billNo.toLowerCase().includes(filterBillNo.toLowerCase());
      return startMatch && endMatch && billNoMatch;
    });
  };

  // --- Render Pages ---

  if (currentPage === "menu") {
    return (
      <div className="min-h-screen bg-gradient-surface p-6">
        <div className="max-w-4xl mx-auto">
          <Card className="shadow-medium border-thai-border-light">
            <CardHeader className="text-center bg-gradient-primary text-primary-foreground rounded-t-lg">
              <CardTitle className="text-2xl font-bold">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•</CardTitle>
              <p className="opacity-90">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
            </CardHeader>
            <CardContent className="p-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <Button onClick={() => setCurrentPage("bills")} className="h-32 text-lg bg-primary hover:bg-primary/90 shadow-soft" size="lg">
                  <div className="flex flex-col items-center gap-3">
                    <FileText className="h-8 w-8" />
                    <span>üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏¥‡∏•</span>
                  </div>
                </Button>
                <Button onClick={() => setCurrentPage("reports")} className="h-32 text-lg bg-accent hover:bg-accent/90 shadow-soft" size="lg">
                  <div className="flex flex-col items-center gap-3">
                    <Search className="h-8 w-8" />
                    <span>üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏¥‡∏•</span>
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (currentPage === "bills") {
    return (
      <div className="min-h-screen bg-gradient-surface p-6">
        <div className="max-w-7xl mx-auto space-y-6">
          <div className="flex items-center gap-4">
            <Button variant="outline" onClick={() => setCurrentPage("menu")} className="shadow-soft">
              <ArrowLeft className="h-4 w-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            </Button>
            <h1 className="text-2xl font-bold text-foreground">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•</h1>
          </div>

          <Card className="shadow-medium border-thai-border-light">
            <CardHeader className="bg-gradient-primary text-primary-foreground">
              <CardTitle className="flex items-center gap-2"><Plus className="h-5 w-5" /> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="billNo">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•</Label>
                  <Input id="billNo" value={formData.billNo} onChange={(e) => setFormData({...formData, billNo: e.target.value})} className="bg-thai-surface border-thai-border-light" />
                </div>
                <div>
                  <Label htmlFor="customer">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Label>
                  <select id="customer" value={formData.customer} onChange={(e) => setFormData({...formData, customer: e.target.value})} className="w-full mt-2 px-3 py-2 bg-thai-surface border border-thai-border-light rounded-md focus:outline-none focus:ring-2 focus:ring-primary">
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</option>
                    {customers.map((c, i) => <option key={i} value={c}>{c}</option>)}
                  </select>
                </div>
                <div>
                  <Label htmlFor="amount">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</Label>
                  <Input id="amount" type="number" value={formData.amount} onChange={(e) => setFormData({...formData, amount: e.target.value})} className="bg-thai-surface border-thai-border-light" />
                </div>
              </div>
              <div className="mt-4">
                <Label htmlFor="notes">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Label>
                <Textarea id="notes" value={formData.notes} onChange={(e) => setFormData({...formData, notes: e.target.value})} className="bg-thai-surface border-thai-border-light" />
              </div>
              <Button onClick={handleNewBill} className="mt-4 w-full bg-success hover:bg-success/90 shadow-soft">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏¥‡∏•</Button>
            </CardContent>
          </Card>

          <Card className="shadow-medium border-thai-border-light">
            <CardHeader className="bg-thai-surface-alt border-b border-thai-border-light">
              <CardTitle className="flex items-center gap-2"><Filter className="h-5 w-5" /> ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                <div>
                  <Label>‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
                  <ThaiDatePicker date={filterStartDate} onDateChange={setFilterStartDate} placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" />
                </div>
                <div>
                  <Label>‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Label>
                  <ThaiDatePicker date={filterEndDate} onDateChange={setFilterEndDate} placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î" />
                </div>
                <div>
                  <Label>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•</Label>
                  <Input value={filterBillNo} onChange={(e) => setFilterBillNo(e.target.value)} placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£" className="bg-thai-surface border-thai-border-light" />
                </div>
                <div className="flex gap-2">
                  <Button onClick={() => setFilterStartDate(undefined); setFilterEndDate(undefined); setFilterBillNo(""); toast({ title: "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" }); }} variant="secondary" className="shadow-soft w-full">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</Button>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="shadow-medium border-thai-border-light">
            <CardHeader className="bg-thai-surface-alt border-b border-thai-border-light">
              <CardTitle>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏¥‡∏• ({filterBills().length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead className="bg-thai-warning/20 border-b border-thai-border-light sticky top-0">
                    <tr>
                      <th className="p-3 text-left font-semibold">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•</th>
                      <th className="p-3 text-left font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                      <th className="p-3 text-left font-semibold">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                      <th className="p-3 text-right font-semibold">‡∏¢‡∏≠‡∏î‡∏ö‡∏¥‡∏•</th>
                      <th className="p-3 text-right font-semibold">‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                      <th className="p-3 text-left font-semibold">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                      <th className="p-3 text-left font-semibold">‡πÄ‡∏ß‡∏•‡∏≤</th>
                      <th className="p-3 text-left font-semibold">‡πÇ‡∏ô‡πâ‡∏ï</th>
                      <th className="p-3 text-center font-semibold">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filterBills().map(bill => (
                      <tr key={bill.id} className={`border-b border-thai-border-light hover:bg-thai-surface-alt transition-colors ${bill.remainingAmount === 0 ? "bg-success/5" : ""}`}>
                        <td className="p-3 font-medium">{bill.billNo}</td>
                        <td className="p-3">{formatThaiDateShort(bill.date)}</td>
                        <td className="p-3">{bill.customer}</td>
                        <td className="p-3 text-right">{bill.amount.toLocaleString('th-TH')}</td>
                        <td className={`p-3 font-semibold text-right ${bill.remainingAmount > 0 ? 'text-warning' : 'text-success'}`}>{bill.remainingAmount.toLocaleString('th-TH')}</td>
                        <td className="p-3">{bill.notes}</td>
                        <td className="p-3 text-muted-foreground">{bill.recordedTime}</td>
                        <td className="p-3 text-primary">{bill.employeeNote || "-"}</td>
                        <td className="p-3 text-center">
                          <Button onClick={() => handleEditNote(bill)} size="sm" variant="outline" className="text-xs">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ô‡πâ‡∏ï</Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (currentPage === "editNote") {
    return (
      <div className="min-h-screen bg-gradient-surface p-6">
        <div className="max-w-4xl mx-auto">
          <Card className="shadow-medium border-thai-border-light">
            <CardHeader className="bg-gradient-primary text-primary-foreground">
              <div className="flex items-center gap-4">
                <Button variant="outline" onClick={() => setCurrentPage("bills")} className="bg-white/10 text-white border-white/20 hover:bg-white/20">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  ‡∏Å‡∏•‡∏±‡∏ö
                </Button>
                <CardTitle>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ô‡πâ‡∏ï</CardTitle>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              {editingBill && (
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-thai-surface-alt rounded-lg">
                    <div><Label className="font-semibold">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏¥‡∏•:</Label><p>{editingBill.billNo}</p></div>
                    <div><Label className="font-semibold">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</Label><p>{editingBill.customer}</p></div>
                    <div><Label className="font-semibold">‡∏¢‡∏≠‡∏î‡∏ö‡∏¥‡∏•:</Label><p>{editingBill.amount.toLocaleString('th-TH')} ‡∏ö‡∏≤‡∏ó</p></div>
                    <div><Label className="font-semibold">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:</Label><p>{formatThaiDateShort(editingBill.date)} ‡πÄ‡∏ß‡∏•‡∏≤ {editingBill.recordedTime} ‡∏ô.</p></div>
                  </div>
                  <div>
                    <Label htmlFor="employeeNote" className="font-semibold">‡πÇ‡∏ô‡πâ‡∏ï‡∏à‡∏≤‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:</Label>
                    <Textarea id="employeeNote" value={newEmployeeNote} onChange={(e) => setNewEmployeeNote(e.target.value)} className="mt-2 bg-thai-surface border-thai-border-light" placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ô‡πâ‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..." rows={4} />
                  </div>
                  <div className="flex gap-3">
                    <Button onClick={handleSaveNote} className="bg-success hover:bg-success/90 shadow-soft">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏ô‡πâ‡∏ï</Button>
                    <Button onClick={() => setCurrentPage("bills")} variant="secondary" className="shadow-soft">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }
  
  // Fallback for "reports" page or other states
  return (
    <div className="min-h-screen bg-gradient-surface p-6">
      <div className="max-w-4xl mx-auto">
        <Button onClick={() => setCurrentPage("menu")}>‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å</Button>
        <p>‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
      </div>
    </div>
  );
}